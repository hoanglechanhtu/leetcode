class Solution {
    public int[] canSeePersonsCount(int[] heights) {
        int n = heights.length;
        int[] res = new int[n];
        
        for (int i = 0; i < n; i ++) {
            int d = 0;
            int j = i + 1;
            int curMax = 0;
            while(j < n && heights[j] < heights[i]) {
                if (curMax < heights[j]) {
                    d ++;
                    curMax = heights[j];
                }
                j ++;
            }
            if (j < n && heights[j] >= heights[i]) d++;
            res[i] = d;
        }
        return res;
    }
}

class Solution {
    public int[] canSeePersonsCount(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int n = heights.length;
        int[] res = new int[n];
        for (int i = n - 1; i >= 0; i --) {
            int nRemove = 0;
            while(!stack.isEmpty() && stack.peek() <= heights[i]) {
                stack.pop();
                nRemove ++;
            }
            if (!stack.isEmpty()) nRemove ++;

            stack.push(heights[i]);
            res[i] = nRemove;
        }
        return res;
        
    
    }
}
