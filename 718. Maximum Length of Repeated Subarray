class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int max = 0;
        int[][] dp = new int[n + 1][m + 1];
        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < m; j ++) {
                if (nums1[i] == nums2[j]) {
                    dp[i + 1][j + 1] = dp[i][j] + 1;
                    max = Math.max(max, dp[i + 1][j + 1]);
                } 
            }
        }
        
        return max;
    }
}

class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int max = 0;
        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < m; j ++) {
                int k = 0;
                while(i + k < n && j + k < m && nums1[i + k] == nums2[j + k]) {
                    k ++;
                }
                max = Math.max(max, k);
            }
        }
        
        return max;
    }
}


class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int low = 0;
        int hi = Math.min(nums1.length, nums2.length) + 1;
        while(low < hi) {
            int middle = low + (hi - low)/2;
            if(check(middle, nums1, nums2)) {
                low = middle + 1;
            } else {
                hi = middle;
            }
        }
        
        return low - 1;
    }
    
    boolean check(int length, int[] nums1, int[] nums2) {
        Set<String> seen = new HashSet<>();
        for (int i = 0; i <= nums1.length - length; i ++) {
            seen.add(Arrays.toString(Arrays.copyOfRange(nums1, i, i + length)));
        }
        for (int i = 0; i < nums2.length - length; i ++) {
            if (seen.contains(Arrays.toString(Arrays.copyOfRange(nums2, i, i + length)))) {
                return true;
            }
        }
        
        return false;
    }
}
