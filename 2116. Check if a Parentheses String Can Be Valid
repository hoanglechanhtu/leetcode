class Solution {
    public boolean canBeValid(String s, String locked) {
        if (s.length() % 2 == 1) return false;
        char[] arr = s.toCharArray();
        int level = 0;
        int wild = 0;
        for (int i = 0; i < s.length(); i ++) {
            if (locked.charAt(i) == '0') {
                wild ++;
            } else {
                if (arr[i] == ')') {
                    level --;
                } else {
                    level ++;
                }
                if (level < 0) {
                    if (wild > 0) {
                        wild --;
                        level ++;
                    } else {
                        return false;
                    }
                }
            } 
        }
        level = 0;
        wild = 0;
        
        for (int i = s.length() - 1; i >= 0; i --) {
            if (locked.charAt(i) == '0') {
                wild ++;
            } else {
                if (arr[i] == ')') {
                    level ++;
                } else {
                    level --;
                }
                if (level < 0) {
                    if (wild > 0) {
                        wild --;
                        level ++;
                    } else {
                        return false;
                    }
                }
            } 
        }
        
        
        
        return level == 0 || level <= wild;
    }
}
