class Solution {
    public int regionsBySlashes(String[] grid) {
        int n = grid.length;
        int[][] g = new int[n * 3][n * 3];
        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < n; j ++) {
                if (grid[i].charAt(j) == '/') {
                    g[i * 3][j * 3 + 2] = g[i * 3 + 1][j * 3 + 1] = g[i * 3 + 2][j * 3] = 1;
                } else if (grid[i].charAt(j) == '\\') {
                    g[i * 3][j * 3] = g[i  * 3 + 1][j * 3 + 1] = g[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        
        int total = 0;
        for (int i = 0; i < n * 3; i ++) {
            for (int j = 0; j < n * 3; j ++) {
                if (g[i][j] == 0) {
                    total ++;
                    dfs(i, j, g);
                }
            }
        }
        
        return total;
    }
    int[][] moves = new int[][]{{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
    void dfs(int x, int y, int[][] g) {
        int n = g.length;
        g[x][y] = 1;
        for (int i = 0; i < moves.length; i ++) {
            int[] move = moves[i];
            if (x + move[0] >= 0 && x + move[0] < n && y + move[1] >= 0 && y + move[1] < n && g[x + move[0]][y + move[1]] == 0) {
                dfs(x + move[0], y + move[1], g);
            }
        }
    }
}
