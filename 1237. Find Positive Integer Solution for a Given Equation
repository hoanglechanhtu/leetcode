/*
 * // This is the custom function interface.
 * // You should not implement it, or speculate about its implementation
 * class CustomFunction {
 *     // Returns f(x, y) for any given positive integers x and y.
 *     // Note that f(x, y) is increasing with respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x, y + 1)
 *     public int f(int x, int y);
 * };
 */

class Solution {
    // public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
    //     List<List<Integer>> res = new ArrayList<>();
    //     for (int i = 1; i < 1000; i ++) {
    //         for (int j = 1; j < 1000; j ++) {
    //             int ret = customfunction.f(i, j);
    //             if (ret == z) {
    //                 res.add(Arrays.asList(i, j));
    //             }
    //         }
    //     }
    //     return res;
    // }
    
    //   public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
    //     List<List<Integer>> res = new ArrayList<>();
    //     for (int i = 1; i <= 1000; i ++) {
    //         int left = 1;
    //         int right = 1000;
    //         while(left < right) {
    //             int middle = (left + right)/2;
    //             int ret = customfunction.f(i, middle);
    //             if (ret == z) {
    //                 res.add(Arrays.asList(i, middle));
    //                 left = middle + 1;
    //             } else if (ret < z) {
    //                 left = middle + 1;
    //             } else {
    //                 right = middle;
    //             }
    //         }
    //     }
    //     return res;
    // }
    
    public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
        List<List<Integer>> res = new ArrayList<>();
        int i = 1;
        int j = 1000;
        while (i <= 1000 && j > 0) {
            int ret = customfunction.f(i, j);
            if (ret == z) {
                res.add(Arrays.asList(i, j));
                j--;
            } else if (ret > z) {
                j --;
            } else {
                i ++;
            }
        }
        return res;
    }
}
