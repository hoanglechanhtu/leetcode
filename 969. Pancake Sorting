class Solution {
    public List<Integer> pancakeSort(int[] arr) {
        int n = arr.length;
        int k = n - 1;
        List<Integer> res = new ArrayList<>();
        while(k >= 0){
            int i = k;
            while(arr[i] != k + 1) i--;
            flip(arr, i, k, res);
            k--;
        }
        return res;
    }
    
    
    void flip(int[] arr, int cur, int expect, List<Integer> res) {
        reverse(arr, cur + 1);
        res.add(cur + 1);
        cur = 0;
        reverse(arr, expect + 1);
        res.add(expect + 1);
    }
    
    void reverse(int[] arr, int end) {
        for (int i = 0; i < end/2; i ++) {
            swap(arr, i, end - i - 1);
        }
    }
    
    void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}
