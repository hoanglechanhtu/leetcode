class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int limit) {
        int[][] map = new int[n][n];
        for (int[] flight: flights) {
            map[flight[0]][flight[1]] = flight[2];
        }
        
        int[] distances = new int[n];
        
        int[] currentStops = new int[n];
        
        Arrays.fill(distances, Integer.MAX_VALUE);
        Arrays.fill(currentStops, Integer.MAX_VALUE);
        
        distances[src] = 0;
        currentStops[src] = 0;
        
        PriorityQueue<int[]> heap = new PriorityQueue<int[]>((a,b) -> a[1] - b[1]);
        heap.offer(new int[]{src, 0, 0});
        while(!heap.isEmpty()) {
            int[] current = heap.poll();
            int node = current[0], stops = current[2], cost = current[1];
            
            if (node == dst) {
                return cost;
            }
            
            if (stops == limit + 1) {
                continue;
            }
            
            for (int k = 0; k < n; k ++) {
                if (map[node][k] > 0) {
                    int dU = cost, dV = distances[k], wUV = map[node][k];
                    
                    if (dU + wUV < dV) {
                        heap.offer(new int[]{k, dU + wUV, stops + 1});
                        distances[k] = dU + wUV;
                        currentStops[k] = stops + 1;
                    } else if (stops < currentStops[k]) {
                       heap.offer(new int[]{k, dU + wUV, stops + 1}); 
                    }
                }
            }
        }
        return distances[dst] == Integer.MAX_VALUE ? -1 : distances[dst];
    }
}
