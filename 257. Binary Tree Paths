/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String> res = new ArrayList<>();
    List<Integer> list = new ArrayList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        tryNode(root);
        return res;
    }
    
    void tryNode(TreeNode root) {
        list.add(root.val);
        if (root.left == null && root.right == null) {
            addResult(list);
            list.remove(list.size() - 1);
            return;
        }
        
        if (root.left != null) tryNode(root.left);
        if (root.right != null) tryNode(root.right);
        list.remove(list.size() - 1);
    }
    
    void addResult(List<Integer> list) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < list.size() - 1; i ++) {
            builder.append(list.get(i) + "->");
        }
        builder.append(list.get(list.size() - 1));
        res.add(builder.toString());
    }
}
