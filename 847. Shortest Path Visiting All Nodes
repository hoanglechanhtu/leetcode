class Solution {
    int[][] cache;
    
    public int shortestPathLength(int[][] graph) {
        int n = graph.length;
        int endingMask = (1 << n) - 1;
        cache = new int[n + 1][endingMask + 1];
        int best = Integer.MAX_VALUE;
        
        for (int node = 0; node < n; node ++) {
            best = Math.min(best, dp(node, endingMask, graph));
        }
        
        return best;
    }
    
    int dp(int node, int mask, int[][] graph) {
        if (cache[node][mask] != 0) {
            return cache[node][mask];
        }
        if ((mask & (mask - 1)) == 0) {
            return 0;
        }
        
        cache[node][mask] = Integer.MAX_VALUE - 1;
        
        for (int neighbor : graph[node]) {
            if ((mask & (1 << neighbor)) != 0) {
                int alreadyVisited = dp(neighbor, mask, graph);
                int notVisited = dp(neighbor, mask ^ (1 << node), graph);
                int betterOption = Math.min(alreadyVisited, notVisited);
                cache[node][mask] = Math.min(betterOption + 1, cache[node][mask]);
            }
        }
        
        return cache[node][mask];
    }
}


class Solution {
    public int shortestPathLength(int[][] graph) {
        
        if (graph.length == 1) return 0;
        int n = graph.length;
        Queue<int[]> queue = new ArrayDeque<>();
        int endingMask = (1 << n) - 1;
        boolean[][] seen = new boolean[n][endingMask];
        
        for (int i = 0; i < n; i ++) {
            queue.add(new int[]{i, 1 << i});
            seen[i][1 << i] = true;
        }
        int step = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i ++) {
                int[] cur = queue.poll();
                int node = cur[0];
                int mask = cur[1];
                
                for (int neighbor: graph[node]) {
                    int nextMask = mask | (1 << neighbor);
                    
                    if (nextMask == endingMask) {
                        return 1 + step;
                    } 
                
                    if (!seen[neighbor][nextMask]) {
                        queue.add(new int[]{neighbor, nextMask});
                        seen[neighbor][nextMask] = true;
                    }
                }
            }
            step ++;
        }
        
        return step;
    }
}
