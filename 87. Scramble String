class Solution {
    Map<String, Boolean> map = new HashMap<>();
    public boolean isScramble(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        if (s1.equals(s2)) return true;
        String key = s1 + "-" + s2;
        if (map.containsKey(key)) {
            return map.get(key);
        }
        int n = s1.length();
        int[] arr = new int[26];
        for (int i = 0; i < n; i ++) {
            arr[s1.charAt(i) - 'a'] ++;
            arr[s2.charAt(i) - 'a'] --;
        }
        
        for (int i = 0; i < 26; i ++) {
            if (arr[i] != 0) {
                map.put(key, false);
                return false;
            }
        }
        boolean res = false;
        for (int i = 1; i < n; i ++) {
            if(isScramble(s1.substring(0, i), s2.substring(0, i)) && 
               isScramble(s1.substring(i), s2.substring(i))
            ) {
                res = true;
            }
            if (isScramble(s1.substring(0, i), s2.substring(n - i)) &&
                isScramble(s1.substring(i), s2.substring(0, n - i))
               ) {
                res = true;
            }
        }
        map.put(key, res);
        return res;
    }
}


class Solution {
    public boolean isScramble(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        int n = s1.length();
        boolean[][][] dp = new boolean[n][n][n + 1];
        for (int k = 1; k <= n; k ++) {
            for (int i = 0; i <= n - k; i ++) {
                for (int j = 0; j <= n - k; j ++) {
                    if (k == 1) {
                        dp[i][j][k] = s1.charAt(i) == s2.charAt(j);
                    } else {
                        for (int q = 1; q < k && !dp[i][j][k]; q ++) {
                            dp[i][j][k] = (dp[i][j][q] && dp[i + q][j + q][k - q]) ||
                                          (dp[i][j + k - q][q] && dp[i + q][j][k - q]);
                        }
                    }
                }
            }
        }
        
        return dp[0][0][n];
    }
}
