class Solution {
    public int getMinSwaps(String num, int k) {
        char[] nums = num.toCharArray();
        for (int i = 0; i < k; i ++) {
            nextPermutation(nums);
        }
        
        char[] origin = num.toCharArray();
       
        return countStep(origin, nums);
    }
    
    void nextPermutation(char[] nums) {
        int k = nums.length - 1; 
        while(k >= 0 && nums[k] <= nums[k - 1]) {
            k --;
        }
        k--;
        int m = nums.length - 1;
        while(nums[m] <= nums[k]) m --;
        swap(nums, k, m);
        reverse(nums, k + 1);
    }
    
    void swap(char[] nums, int a, int b) {
        char temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
    
    void reverse(char[] nums, int from) {
        int length = nums.length - from;
        for (int i = 0; i < length/2; i ++) {
            swap(nums, from + i, nums.length -i - 1);
        }
    }
    
    int countStep(char[] origin, char[] nums) {
        int count = 0;
        int i = 0, j = 0;
        while(i < origin.length) {
            j = i;
            while(i < origin.length && origin[i] == nums[j]) {
                i ++;
                j ++;
            }
            
            while(j < origin.length && origin[i] != nums[j]) {
                j ++;
            }
            while(j > i) {
                count ++;
                swap(nums, j - 1, j);
                j --;
            }
            
        }
        return count;
    }
}
