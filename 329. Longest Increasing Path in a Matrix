class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int max = 0;
        int n = matrix.length;
        int m = matrix[0].length;
        int[][] memo = new int[n][m];
        for (int i = 0; i < n; i ++) {
            Arrays.fill(memo[i], -1);
        }
        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < m; j ++) {
                boolean[][] free = new boolean[n][m];
                for (int k = 0; k < n; k ++) {
                    Arrays.fill(free[k], true);
                }
                
                max = Math.max(max, dfs(i, j, matrix, free, memo));
            }
        }
        
        return max;
    }
    
    int dfs(int x, int y, int[][] matrix, boolean[][] free, int[][] memo) {
        free[x][y] = false;
        if (memo[x][y] != -1) {
            free[x][y] = true;
            return memo[x][y];
        }
        int res = 1;
        //left
        if (y > 0 && free[x][y - 1] && matrix[x][y] < matrix[x][y - 1]) {
            res = Math.max(res, 1 + dfs(x, y - 1, matrix, free, memo));
        } 
        //right
        if (y < matrix[0].length - 1 && free[x][y + 1] && matrix[x][y] < matrix[x][y + 1]) {
            res = Math.max(res, 1 + dfs(x, y + 1, matrix, free, memo));
        }
        //top
        if (x > 0 && free[x - 1][y] && matrix[x][y] < matrix[x - 1][y]) {
            res = Math.max(res, 1 + dfs(x - 1, y, matrix, free, memo));
        }
        
        //bottom
        if (x < matrix.length - 1 && free[x + 1][y] && matrix[x][y] < matrix[x + 1][y]) {
            res = Math.max(res, 1 + dfs(x + 1, y, matrix, free, memo));
        }
        memo[x][y] = res;
        free[x][y] = true;
        return res;
    }
}
