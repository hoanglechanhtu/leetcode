/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        ListNode middle = findMiddle(head);
        middle = reverse(middle);
        int max = Integer.MIN_VALUE;
        while(middle != null) {
            max = Math.max(middle.val + head.val, max);
            head = head.next;
            middle = middle.next;
        }
        
        return max;
    }
    
    ListNode findMiddle(ListNode head) {
        ListNode pre = new ListNode(0, head);
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null) {
            pre = slow;
            slow = slow.next;
            fast = fast.next;
            if (fast != null) fast = fast.next;
        }
        pre.next = null;
        return slow;
    }
    
    ListNode reverse(ListNode node){
        if (node.next == null) return node;
        ListNode res = reverse(node.next);
        
        node.next.next = node;
        node.next = null;
        
        return res;
    }
    
    
}



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        Deque<Integer> queue = new ArrayDeque<>();
        while(head != null) {
            queue.addLast(head.val);
            head = head.next;
        }
        int max = Integer.MIN_VALUE;
        while(queue.size() > 1) {
            int first = queue.removeFirst();
            int last = queue.removeLast();
            max = Math.max(max, first + last);
        }
        
        return max;
    }
    
}
