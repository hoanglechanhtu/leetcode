class Solution {
    public int longestStrChain(String[] words) {
        int n = words.length;
        Arrays.sort(words, Comparator.comparing(i -> i.length()));
        int max = 0;
        int[] dp = new int[n];
        for (int i = 0; i < n; i ++) {
            if (words[i].length() != 1) {
                int cur = 0;
                for (int j = 0; j < i; j ++) {
                    if (predecessor(words[i], words[j])) {
                        cur = Math.max(dp[j] + 1, cur);
                    }
                }
                dp[i] = cur;
                max = Math.max(max, cur);
            }
        }
        
        return max + 1;
        
    }
    
    private boolean predecessor(String o2, String o1) {
        int nDifferent = 0;
        if (o2.length() - o1.length() != 1) return false;
        for (int i = 0; i < o2.length(); i ++) {
            if (i - nDifferent >= o1.length()) nDifferent ++;
            else if (o1.charAt(i - nDifferent) != o2.charAt(i)) nDifferent ++;
        }
        
        return nDifferent == 1;
    }
}


class Solution {
    public int longestStrChain(String[] words) {
        Map<String, Integer> dp = new HashMap<>();
        Arrays.sort(words, (a, b)->a.length() - b.length());
        int res = 0;
        for (String word : words) {
            int best = 0;
            for (int i = 0; i < word.length(); ++i) {
                String prev = word.substring(0, i) + word.substring(i + 1);
                best = Math.max(best, dp.getOrDefault(prev, 0) + 1);
            }
            dp.put(word, best);
            res = Math.max(res, best);
        }
        return res;
    }
}
