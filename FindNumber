package org.example.listed;

public class FindNumber {
    /**
     * how many number have n digits that the sum of all digits equal to k
     * @param n the number of digit of a number
     * @param k the target
     */
    public void solution(int n, int k) {
        long[][] dp = new long[n + 1][k + 1];
        for (int i = 1; i <= 9 && i <= k; i ++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i ++) {
            for (int j = 1; j <= k; j ++) {
                long total = 0;
                for (int t = 0; t <= 9 && j >= t; t ++) {
                    total += dp[i - 1][j - t];
                }
                dp[i][j] = total;
            }
        }

        System.out.println(dp[n][k]);
    }

    /**
     * Find the pth number from above problem
     * @param n the number of digit of a number
     * @param k the target
     * @param p pth eligible number
     */
    public void solution(int n, int k, int p) {
        long[][] dp = new long[n + 1][k + 1];
        for (int i = 1; i <= 9 && i <= k; i ++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i ++) {
            for (int j = 1; j <= k; j ++) {
                long total = 0;
                for (int t = 0; t <= 9 && j >= t; t ++) {
                    total += dp[i - 1][j - t];
                }
                dp[i][j] = total;
            }
        }

        System.out.println(dp[n][k]);
        int start = 1;

        while(n > 1){
            for (int i = start; i <=9; i ++) {
                if (dp[n - 1][k - i] < p) {
                    p -= dp[n - 1][k - i];
                } else {
                    k = k - i;
                    System.out.println(i);
                    break;
                }
            }
            n --;
            start = 0;
        }
        System.out.println(k);
    }
}
