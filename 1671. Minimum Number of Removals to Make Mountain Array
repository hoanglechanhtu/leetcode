class Solution {
    public int minimumMountainRemovals(int[] nums) {
        int n = nums.length;
        int[] leftToRight = new int[n];
        int[] rightToLeft = new int[n];
        leftToRight[0] = 1;
        rightToLeft[n - 1] = 1;
        for (int i = 1; i < n; i ++) {
            leftToRight[i] = 1;
            for(int j = 0; j < i; j ++) {
                if (nums[i] > nums[j]) {
                    leftToRight[i] = Math.max(leftToRight[i], leftToRight[j] + 1);
                }
            }   
        }
        
        for (int i = n - 2; i >= 0; i --) {
            rightToLeft[i] = 1;
            for (int j = n - 1; j > i; j --) {
                if (nums[i] > nums[j]) {
                    rightToLeft[i] = Math.max(rightToLeft[i], rightToLeft[j] + 1);
                }
            }
        }
        
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i ++) {
            if (leftToRight[i] > 1 && rightToLeft[i] > 1) {
                min = Math.min(min, (i - leftToRight[i] + 1) + (n - i - 1 - rightToLeft[i] + 1));
            }
        }
        
        return min;
    }
}
