class Solution {
    int[] dis;
    int res = 0;
    public int smallestDistancePair(int[] nums, int k) {
        k = k;
        int n = nums.length;
        Arrays.sort(nums);
        dis = new int[n - 1];
        int minDis = Integer.MAX_VALUE;
        int maxDis = nums[n - 1] - nums[0];
        for (int i = 0; i < n - 1; i ++) {
            dis[i] = nums[i + 1] - nums[i];
            minDis = Math.min(minDis, dis[i]);
        }
        while(minDis < maxDis) {
            int middleDis = (minDis + maxDis)/2;
            int nPair = pairLessThan(middleDis);
            if (nPair < k) {
                minDis = middleDis + 1;
            } else if (nPair > k) {
                maxDis = middleDis;
            } else {
                return res;
            }
        } 
        pairLessThan(maxDis);
        return res;
    }
    
    int pairLessThan(int middleDis) {
        res = Integer.MIN_VALUE;
        int slow = 0;
        int fast = 1;
        int count = 0;
        int curDis = dis[slow];
        while(fast <= dis.length) {
            if (curDis <= middleDis) {
                count += fast - slow;
                res = Math.max(curDis, res);
                fast ++;
                if (fast <= dis.length) curDis += dis[fast - 1];
            } else {
                slow ++;
                curDis -= dis[slow - 1];
            }
        }
        return count;
    }
}


/*
Example: 1,2,3,4,5,6,7,8 size = 8
     dis-1,1,1,1,1,1,1.  size = 7
     with slow and fast, u can calculate how many pair less than x
     slow = 0, fast = 1, curDis = dis[0]
     if curDis < x -> move fast right
     else move slow -> right
     number of pair u consider each time is fast - slow ([fast, slow], [fast, slow + 1], [fast, slow + 2], ...[fast, fast - 1])
     
     while(minDis < maxDis) why not minDis <= maxDis
     Example 1,6,1 -> 1,1,6 -> 0,5 (pair -> 0, 5, 5)
     k = 2, middleDis = minDis = maxDis = 5 -> nPair = 3 -> nPair > k -> minDis = middleDis = maxDistance -> loop forever
     




*/
