class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        boolean[][] map = new boolean[n][n];
        for (int i = 0; i < edges.length; i ++) {
            map[edges[i][0]][edges[i][1]] = true;
            map[edges[i][1]][edges[i][0]] = true;
        }
        
        Queue<Integer> queue = new ArrayDeque<>();
        queue.add(source);
        
        while(!queue.isEmpty()) {
            int cur = queue.poll();
            if (cur == destination) {
                return true;
            }
            for (int i = 0; i < n; i ++) {
                if (map[cur][i]) {
                    map[cur][i] = false;
                    map[i][cur] = false;
                    queue.add(i);
                }
            }
        }
        
        
        return false;
    }
}


class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < edges.length; i ++) {
            map.putIfAbsent(edges[i][0], new ArrayList<>());
            map.get(edges[i][0]).add(edges[i][1]);
            
            map.putIfAbsent(edges[i][1], new ArrayList<>());
            map.get(edges[i][1]).add(edges[i][0]);
        }
        
        Queue<Integer> queue = new ArrayDeque<>();
        queue.add(source);
        
        while(!queue.isEmpty()) {
            int cur = queue.poll();
            if (cur == destination) {
                return true;
            }
            List<Integer> tos = map.get(cur);
            if (tos == null) {
                continue;
            }
            map.remove(cur);
            for (Integer to : tos) {
                queue.add(to);
            }
        }
        
        
        return false;
    }
}
