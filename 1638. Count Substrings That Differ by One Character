class Solution {
    public int countSubstrings(String s, String t) {
        int total = 0;
        for (int i = 0; i < s.length(); i ++) {
            for (int j = 0; j < t.length(); j ++) {
                int miss = 0;
                for (int length = 1; i + length - 1 < s.length() && j + length - 1 < t.length(); length ++) {
                    if (s.charAt(i + length - 1) != t.charAt(j + length - 1)) {
                        miss ++;
                        if (miss > 1) break;
                    }
                    
                    if (miss == 1) total ++;
                }
            }
        }
        return total;
    }
}



class Solution {
    public int countSubstrings(String s, String t) {
        int total = 0;
        
        for (int i = 0; i < s.length(); i ++) {
            for (int j = 0; j < t.length(); j ++) {
                if (s.charAt(i) != t.charAt(j)) {
                    int left = 1;
                    int right = 1;
                    while(i - left >= 0 && j - left >= 0 && s.charAt(i - left) == t.charAt(j - left)) {
                        left ++;
                    }
                    
                    while(i + right < s.length() && j + right < t.length() && s.charAt(i + right) == t.charAt(j + right)) {
                        right ++;
                    }
                    
                    total += left * right;
                }
            }
        }
        return total;
    }
}


class Solution {
    public int countSubstrings(String s, String t) {
        int[][] dpl = new int[101][101];
        int[][] dpr = new int[101][101];
        for (int i = 1; i <= s.length(); i ++) {
            for (int j = 1; j <= t.length(); j ++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dpl[i][j] = 1 + dpl[i - 1][j - 1];
                    
                }
            }
        }
        
         for (int i = s.length(); i > 0; i --) {
            for (int j = t.length(); j > 0; j --) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dpr[i - 1][j - 1] = 1 + dpr[i][j];
                }
            }
        }
        
        int total = 0;
        for (int i = 0; i < s.length(); i ++) {
            for (int j = 0; j < t.length(); j ++) {
                if (s.charAt(i) != t.charAt(j)) {
                    total +=  (dpl[i][j] + 1) * (dpr[i + 1][j + 1] + 1);
                }
            }
        }
        return total;
    }
}


class Solution {
    public int countSubstrings(String s, String t) {
        int total = 0;
        for (int i = 0; i < s.length(); i ++) {
            total += helper(s, t, i, 0);
        }
        for (int j = 1; j < t.length(); j ++) {
            total += helper(s, t, 0, j);
        }
        return total;
    }
    
    int helper(String s, String t, int i, int j) {
        int total = 0;
        int pre = 0, cur = 0;
        int n = s.length(), m = t.length();
        
        for (; i < n && j < m; i ++, j ++) {
            cur ++;
            
            if (s.charAt(i) != t.charAt(j)) {
                pre = cur;
                cur = 0;
            }
            
            total += pre;
        }
             
        return total;
    }
}
