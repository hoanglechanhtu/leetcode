class Solution {
    int[][] dirs = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    public int shortestPath(int[][] grid, int k) {
        int m = grid.length;
        int n = grid[0].length;
        int[] start = new int[]{0, 0};
        int[] end = new int[]{m - 1, n - 1};
        
        Queue<int[]> queue = new ArrayDeque<>();
        Set<Integer> set = new HashSet<>();
        //x, y, remaining eliminate
        queue.offer(new int[]{start[0], start[1], k});
        set.add(getKey(start[0], start[1], k));
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i ++) {
                int[] cur = queue.poll();
                int x = cur[0], y = cur[1], rEliminate = cur[2];
                if (x == end[0] && y == end[1]) {
                    return level;
                }
                for (int j = 0; j < 4; j ++) {
                    int nextX = x + dirs[j][0], nextY = y + dirs[j][1];
                    if (nextX >= 0 && nextY >= 0 && nextX < m && nextY < n)
                    {
                        
                        if (grid[nextX][nextY] == 1 && rEliminate > 0 && !set.contains(getKey(nextX, nextY, rEliminate - 1))) {
                            queue.offer(new int[]{nextX, nextY, rEliminate - 1});
                            set.add(getKey(nextX, nextY, rEliminate - 1));                            
                        } else if (grid[nextX][nextY] == 0 && !set.contains(getKey(nextX, nextY, rEliminate))) {
                            queue.offer(new int[]{nextX, nextY, rEliminate});
                            set.add(getKey(nextX, nextY, rEliminate));
                        }

                    }
                }
            }
            
            level ++;
        }
        return -1;
    }
    
    int getKey(int x, int y, int r) {
        return x * 40 + y * 40 * 40 + r * 40 * 40 * 40;
    }
}
