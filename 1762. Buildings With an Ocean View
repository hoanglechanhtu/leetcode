//Problem
There are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.

The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.

Return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.

 

Example 1:

Input: heights = [4,2,3,1]
Output: [0,2,3]
Explanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.
Example 2:

Input: heights = [4,3,2,1]
Output: [0,1,2,3]
Explanation: All the buildings have an ocean view.
Example 3:

Input: heights = [1,3,2,4]
Output: [3]
Explanation: Only building 3 has an ocean view.
 

Constraints:

1 <= heights.length <= 105
1 <= heights[i] <= 109

class Solution {
    public int[] findBuildings(int[] heights) {
        List<Integer> res = new ArrayList<>();
        int n = heights.length;
        for (int i = 0; i < n; i ++) {
            boolean hasOceanView = true;
            for (int j = i + 1; j < n; j ++) {
                if (heights[j] >= heights[i]) {
                    hasOceanView = false;
                }
            }
            if (hasOceanView) {
                res.add(i);
            }
        }
        int[] resArr = new int[res.size()];
        for (int i = 0; i < res.size(); i ++) {
            resArr[i] = res.get(i);
        }
        return resArr;
    }
}



class Solution {
    class Entity {
        public int val;
        public int index;
        public Entity(int val, int index) {
            this.val = val;
            this.index = index;
        }
        
    }
    public int[] findBuildings(int[] heights) {
        Stack<Entity> stack = new Stack<>();
        
        stack.push(new Entity(Integer.MAX_VALUE, -1));
        for (int i = 0; i < heights.length; i ++) {
            while(heights[i] >= stack.peek().val) {
                stack.pop();
            }
            
            stack.push(new Entity(heights[i], i));
        }
        
        int[] res = new int[stack.size() - 1];
        for (int i = 0; i < res.length; i ++) {
            res[res.length - i - 1] = stack.pop().index;
        }
        return res;
    }
}
