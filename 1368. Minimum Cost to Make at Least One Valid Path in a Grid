class Solution {
    int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    public int minCost(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i ++){
            Arrays.fill(dp[i], -1);
        }
        
        Queue<int[]> queue = new ArrayDeque<>();
        int cost = 0;
        dfs(0, 0, queue, cost, grid, dp);
        while(!queue.isEmpty()) {
            cost ++;
            int size = queue.size();
            for (int i = 0; i < size; i ++) {
                int[] cur = queue.poll();
                for (int t = 0; t < 4; t ++) {
                    int[] dir = dirs[t];
                    dfs(cur[0] + dir[0], cur[1] + dir[1], queue, cost, grid, dp);
                }
            }
        }
        
        return dp[m - 1][n - 1];
        
    }
    
    void dfs(int x, int y, Queue<int[]> queue, int cost, int[][] grid, int[][] dp) {
        int m = grid.length;
        int n = grid[0].length;
        if (x < 0 || x == m || y < 0 || y == n || dp[x][y] != -1) {
            return ;
        }
        dp[x][y] = cost;
        queue.add(new int[]{x, y});
        int[] dir = dirs[grid[x][y] - 1];
        dfs(x + dir[0], y + dir[1], queue, cost, grid, dp);
    }
}
